                                        Reactive Programming
.............................................................................................

What is Reactive Programming ?

it is one of the  Programming Paradigm(way).

Programming paradigm:
1.object oriented programming
2.functional programming
3.procedural oriented programming.
etc....

Reactive programming is collection of many programming paradigm best parts and principles.
Reactive programming is collection of oo , functional, event driven......principles

Reactive Programming  = oo + functional + event driven..

Reactive Programming languages:
..............................
There is no such separate pl which adopts reactive programming alone.
 rather which is eXtended by other languages : ReactiveX
Reactive programming is just like plugin, which has been pluged in inside languages via libs and frameworks.

Libs for java :
1.Rxjava
2.Project Reactor.


Vert.X uses rxjava....
Spring uses Project Reactor

What is Reactive?

  Oxford dictionary defines reactive  as "showing a response to a stimulus"

Showing a response to a stimulus
...................................

1.1 (Physiology) Showing an immune response to a specific antigen

1.2 (of a disease or illness) caused by a reaction to something: ‘reactive
depression’

Acting in response to a situation rather than creating or controlling it

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Reactive Architecture / Software /System
.........................................

A software showing responses to stimuli(event/actions)

Stimuli could be
● Events, Messages, Requests, Failures, Measures, Availability…

//////////////////////////////////////////////////////////////////////////////////////////////////////

In Reactive systems, Application is controlled by events.
Software controls other softwares.
/////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////
how to reduce sql query exection on database engine, how to add query features inside apps via language.
-Query language-SQL Like language- inside programming language.


                          That is birth of LINQ

It is microsoft "Language-Integrated Query (LINQ)" is the name for a set of technologies based on the integration of query capabilities directly into the C# language.


                   // Specify the data source.
                 int[] scores = new int[] { 97, 92, 81, 60 };

        // Define the query expression.
      IEnumerable<int> scoreQuery = from score in scores  where score > 80  select score;

                    "select score from scores where score > 80" -SQL Query

Netflix inspired the LINQ, who wanted put the same syntax into java language.

      For that who created  and crafted specfication that is called "Reactive"

Netflix started building a lib called "Reactive java-Rxjava", then open sourced, after
that it became very popular, other languages also started implementing reactive features.
....................................................................................................
                                Why Reactive Programming / for what Reactive Programming
.............................................///////////..............................................

                Data Processing inside language itself using various patterns and principles 
                             reducing SQL like implementations as much as possible.

//////////////////////////////////////////////////////////////////////////////////////////////

Standards of Reactive Programming:
.................................

->The Reactive Manifesto:https://www.reactivemanifesto.org/

   It is standard, published to build and ensure that system is fully reactive.


Principles of Best Reactive System:

1.Responsive:
   Reactive Systems should be responsive : Quick/Timely result.

2.Resilient:
   Any System is subject to fail, You must have failure work around.
   failures and how to fallback, provides high availability

3.Elastic : scalability
   In case of load, how to scale application by increasing and decreasing resources(Softwares)

4.Message Driven
   The Programs sends and receives data via events- event driven.


->Reactive Streams - It is another standards

////////////////////////////////////////////////////////////////////////////////////////////


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

How to start writing reactive programming?

Reactive Programming can be written in any language which has extension.

Reactive Programming has two major design pattern and one programming principle:
.................................................................................

1.Observable Design pattern.
2.iterator design pattern
3.functional programming


//////////////////////////////////////////////////////////////////////////////////////////////////////

In Reactive systems, Application is controlled by events.
Software controls other softwares.
/////////////////////////////////////////////////////////////////////////////////////////////////////

History of Reactive Programming:
................................

Objective of any apps:

-store data , where inside databases /datasources
-process data  from database/datasources- for report prepation
-read data - reading processed/raw data.

if you are using database - we use sql

if you are using file system  -we use pl io apis

if you are using in memory  -  we use pl apis

Data Processing;
let say, i want list of employees who is working in onsite.

all employees are stored in database only. in order to get data, you have to write sql quries.

sql queries are executed on database engine and application finally gets reports.

//////////////////////////////////////////////////////////////////////////////////////////////////////
how to reduce sql query exection on database engine, how to add query features inside apps via language.
-Query language-SQL Like language- inside programming language.


                          That is birth of LINQ

It is microsoft "Language-Integrated Query (LINQ)" is the name for a set of technologies based on the integration of query capabilities directly into the C# language.


                   // Specify the data source.
                 int[] scores = new int[] { 97, 92, 81, 60 };

        // Define the query expression.
      IEnumerable<int> scoreQuery = from score in scores  where score > 80  select score;

                    "select score from scores where score > 80" -SQL Query

Netflix inspired the LINQ, who wanted put the same syntax into java language.

      For that who created  and crafted specfication that is called "Reactive"

Netflix started building a lib called "Reactive java-Rxjava", then open sourced, after
that it became very popular, other languages also started implementing reactive features.
....................................................................................................
                                Why Reactive Programming / for what Reactive Programming
.............................................///////////..............................................

                Data Processing inside language itself using various patterns and principles 
                             reducing SQL like implementations as much as possible.


Micro services and Reactive Programming :

-Micro service is architectural pattern for building distributed application.
 Since it is distributed, application components need to talk each other in order to exchange data..

  Here two components going to exchange data.

 Component-A  <------------------------------------------------>  Component-B ------>database



Standards of Reactive Programming:
.................................

->The Reactive Manifesto:https://www.reactivemanifesto.org/

   It is standard, published to build and ensure that system is fully reactive.


Principles of Best Reactive System:

1.Responsive:
   Reactive Systems should be responsive : Quick/Timely result.

2.Resilient:
   Any System is subject to fail, You must have failure work around.
   failures and how to fallback, provides high availability

3.Elastic : scalability
   In case of load, how to scale application by increasing and decreasing resources(Softwares)

4.Message Driven
   The Programs sends and receives data via events- event driven.
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

How to start writing reactive programming?

Reactive Programming can be written in any language which has extension.

Reactive Programming has two major design pattern:
..................................................

Component Communication Patterns: Event Driven Programming:
...........................................................

1.Observable Design pattern:
............................

Object Relationship: Tightly coupled


class OrderService{

 //connect objects
private InventoryService inventoryService;
 //setter and getter
 //constructors...

  public boolean updateInventory(Order order){
         return inventoryService.upateInventory(order);
  }

}

class InventoryService{

  public boolean updateInventory(Order order){

   //write logic to update inventory data source....

  }
}


1.Loosly coupled pattern

-via nonblocking message oriented ,event driven arch.

How to build pattern?

Observable design pattern : Event driven  message passing.



Legacy Observable Design pattern has some drawback:

Legacy observer design pattern has only 1 thing

  1.they will be able to send only data

Have not addresssed the following
  1.what if error is produced
  2.what if the producer has stopped producing values. 

Reactive programming address the above issues.

Producer can send data,error, complete - events/signals

				Publisher/Owner/Producer <---------Data Source(Device)
					|
				 data / error  & complete
					|
			       Event Notification Interface
					|
			------------------------------------- channels
			|               |                  |
        	      data              error              complete - events

			|		|		   |
			------------------------------------
					|
				     Subscriber

////////////////////////////////////////////////////////////////////////////////////////////////////////

Data Transmission pattern:
.........................

Simple example:

public class Employee {
    private int id;
    private String name;

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }
}

Main:

 Empoyee emp = new Employee();

 //
 emp.getId();

Anthoer example:

List<Integer> numbers = Arrays.asList(1,2,3,4,5,6,7);




numbers.forEach(number->number)


Iterator Design Pattern:

Iterator design pattern talks about how to fetch value/ pull value from the Producer.


In General iterator design pattern  and implementation  is "pull based".


-In Pull Systems,The Consumer determines when it receives data from the producer.
 
  The Producer itself is unaware of when the data will be delivered to the consumer.



   code
          [data,data,data,data]
            |    |    |
          pull  pull  pull
           
          data


Major Drawbacks of Pull based model:
...................................

1. The whole data must have been loaded into memory
2. More imperative rather than declarative

 
Push Based Programming:
.........................

-Opposit to Pull
-Where consumer never pull the data.
-Producer starts sending data over channel with help of events.
-Consumer only listens for data.


Iterator has two patterns of sending data : pull based----old push based--reactive style.


                         Publisher/Owner/Producer <---------Data Source(Device)
					|
				  push data into memory over time.
					|
				  -----------------------------
                                      1---2---3--4--error--5--|-->   Data emission 
				  ------------------------------
                        		|    
				  emit event data,erorr,complete           	
			                |
									|
			       Event Notification Interface
					|
			------------------------------------- channels
			|               |                  |
                     data              error              complete

			|		|		   |
			------------------------------------
					|
				     Subscriber


Reactive programming focus on push based .

Now a days reactive programming even supports pull. ->Reactive Pull ----> [Push + Pull].

/////////////////////////////////////////////////////////////////////////////////////////////////////////

Functional style principles:

1.pure function

2.immutablity

3.function composition

4.declarative programming



-Pure function

  function which takes parameter, returns the same as it is
  function which wants to return new data , dont modify the data , rather 
  creates new of copy of the data , return that

 -Immutablity
    Dont override the same memory location,rather creates copy of that memory and
	return that.

-function composition :-High Order function   

 -Functions can be passed as parameters 
 -Functions can be returned as a result
 -Separation of responsibilities (separation of Concerns)
 -Patterns: Execute-Around, Deferred Execution, Decorator, Strategy, Template      Method

 newFunction =  func1 + func2

4.declarative  --->imperative

   eg: HTML

Java declarative Programming:
............................

Java supports declarative programming through "functional Abstraction".

java supports collection processing declaratively via "Streams"


Streams:
  Functional abstraction , more declarative , data Processing.

  Eg:
  List.stream().map().filter(condition).collect()
/////////////////////////////////////////////////////////////////////////////////////////////

Reactive programming is more declarative,functional,oo,event driven programming model.
/////////////////////////////////////////////////////////////////////////////////////////////

How to start?

*&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Java and Reactive Programming:

1.Rxjava 1.x
2.Rxjava 2 and 3
3.Project Reactor -- alternate to Rxjava -Pivtol implementation.
             largly used in side spring 5.....


Publisher and Subscriber:
.........................

->how to create these objects
->how to send data
->how to process data.

Terminallogy:

1.Stream:
  Logical flow of data.
 ->Up stream
 ->down stream

Objects in Rxjava:

Publisher:

1.Observable
2.Subject
3.Single
4.Maybe
5.Completeable
6.Flowable

Subscriber
 Subscriber

Object =  methods =>for data processing: Operators:
..................................................

2.Operators

 Operators are in general methods.

operators are used to create,process stream.

-operators are designed based on functional programming concepts and implementation.

functional programming concepts behind operators:

1.pure function

1.1.pure function it is funcation, takes input, dont modify that input with internal state and return same.

   function  myfun(arg){
          return arg;
   }

  myfun(10);


1.2. pure function if it wants to modify the state, dont modify the original state rather than
   take copy of that ,modifies that return .



2.immutablity

  dont modify original memory address, rather return new memory address


3.all operators are based on builder /command chain /fluent pattern

  operators return the same type again and again.

 eg : strings
  "hello".toString().trim().toUpper()..


Operators:
are classified into various category
-create Stream
-tranformation
-filtering
-coimbing
-Error handling
-utility 
-conditional and boolean
-mathmetical and aggregate
-backpressue
-connectable
-converter

///////////////////////////////////////////////////////////////////////////////////////////

Lets create stream: -  Publisher ---push data ----subscriber--listens for data


package com.mycom;

import io.reactivex.Observable;

public class CreateStream {
    public static void main(String[] args) {
        Observable<Integer> stream = Observable.create(subscriber -> {
            //push data(data,error,complete) into stream , where consumer listens for data.
            subscriber.onNext(12);
            subscriber.onNext(23);
         //   subscriber.onError(new RuntimeException("SOmething went wrong"));
            subscriber.onNext(56);
            subscriber.onNext(89);
            subscriber.onComplete();
            subscriber.onNext(999999);

        });
        //subscriber/observer/listener
        stream.subscribe(data -> System.out.println(data), err -> System.out.println(err), () -> {
            System.out.println("Done");
        });
    }

}
When stream is closed?

-when ever error is thrown.
-when ever oncomplete is called

////////////////////////////////////////////////////////////////////////////////////////


------------------------------------------------------------------------------------------------------

Data Source;

1.primitive data types
2.Objects
3.List
4.Array
5.Future- java.util.concurrency


operators to create Stream

-create
-just
-range
-fromIterable
-fromArray
-timer operators

 package com.mycom;

import io.reactivex.Observable;

public class JustOperator {
    public static void main(String[] args) {
        Observable<Integer> stream = Observable.just(1, 2, 3, 4, 5);

//        stream.subscribe(data -> System.out.println(data), err -> System.out.println(err), () -> {
//            System.out.println("Done");
//        });
        stream.subscribe(System.out::println, System.out::println, () -> {
            System.out.println("Done");
        });
    }
}
/////////////////////////////////////////////////////////////////////////////////////////////

package com.mycom;

import io.reactivex.Observable;

import java.util.Arrays;
import java.util.List;

//List as Data source
public class ListOperator {
    public static void main(String[] args) {
        List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6);
        Observable stream = Observable.fromIterable(list);
        stream.subscribe(System.out::println, System.out::println, () -> {
            System.out.println("Done");
        });
    }
}

package com.mycom;

import io.reactivex.Observable;

public class ArrayOperator {
    public static void main(String[] args) {
        Integer[] array = {1, 2, 3, 4, 5};
        Observable stream = Observable.fromArray(array);
        stream.subscribe(System.out::println, System.out::println, () -> {
            System.out.println("Done");
        });
    }
}



package com.mycom;

import io.reactivex.Observable;

//i want to stream 1..1000
public class RangeOperator {
    public static void main(String[] args) {
     Observable<Integer>  stream = Observable.range(1,100);
        stream.subscribe(System.out::println, System.out::println, () -> {
            System.out.println("Done");
        });
    }
}
///////////////////////////////////////////////////////////////////////////////////////

Timer Related: i want to stream data based on cpu timer, lets every 1sec/ms i want to send a number to subscriber.

package com.mycom;

import io.reactivex.Observable;

import java.util.concurrent.TimeUnit;

public class IntervalOperator {
    public static void main(String[] args) {
        //sequence of number for every 1000ms
        Observable<Long> stream = Observable.interval(1000, TimeUnit.MILLISECONDS);

        System.out.println(Thread.currentThread().getName());
        stream.subscribe(data->{
            System.out.println(Thread.currentThread().getName());
            System.out.println(data);
        }, System.out::println, () -> {
            System.out.println("Completed");
        });
        //pause main thread so that i can see data emission.
        try {
            Thread.sleep(10000);
        } catch (InterruptedException exception) {
            exception.printStackTrace();
        }
    }
}
////////////////////////////////////////////////////////////////////////////////////////////

Data Processing:
 -Transformation
 -filtering
 -logical conditions
 -sorting

Note: any operator(method) is based on two principles
 -pure function
 -immutablity 
 -function composition - comining function - fn1().fn2()

every operator returns the same type - eg Observable.fn()-->Observable-->fn2()

package com.mycom;

import io.reactivex.Observable;

//Builder /fluent pattern

public class MoreDeclarative {
    public static void main(String[] args) {
        Observable.just(1, 2, 3, 4, 5)
        .subscribe(System.out::println, System.out::println, () -> {
            System.out.println("Done");
        });
    }


}

Transformation:

package com.mycom;

import io.reactivex.Observable;

public class Transformation {
    public static void main(String[] args) {
        Observable.range(1, 10)
                .map(x -> 10 * x)
                .map(y -> 2 * y)
                .subscribe(System.out::println, System.out::println, () -> {
                    System.out.println("Done");
                });
    }
}

package com.mycom;

import io.reactivex.Observable;

public class Filterating {
    public static void main(String[] args) {
        Observable.range(1, 100)
                .filter(x -> x % 2 != 0)
                .map(y -> y + 2)
                .subscribe(System.out::println, System.out::println, () -> {
                    System.out.println("Done");
                });
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////////

Types of streams:

1.Up Stream
2.Down Stream


 if you want to understand this concept, Assembly Line Analogy:

    Reactive Programs are thought as conveyor belt and work stations. The raw material pours from a source and ends up as fininished product ready to be pushed to the consumer.

    work stations are implemented by Reactive Operators(methods), are connected via Stream Objects(Observable)
/////////////////////////////////////////////////////////////////////////////////////////////

Subscription:
 reading data, error, complete single.

rxjava provides a separate methods/operators available to read data,error,complete instead of using
subscribe method alone.


package com.mycom;

import io.reactivex.Observable;

public class SubscriptionOperators {
    public static void main(String[] args) {
        Observable
                .range(1, 10)
                .subscribe(System.out::println, System.out::println, () -> System.out.println("done"));
        //Operators for data event,error event, complete.
        Observable.range(1, 10)
                .doOnSubscribe(subscriber-> System.out.println("On Subscription"))
                .doOnNext(System.out::println)
                .doOnError(System.out::println)
                .doOnComplete(() -> System.out.println("done!!"))
                .subscribe();

    }
}

Broad Casting:

Producer(Stream)-----can be connected with ---one Subscriber : 
  one to one  This communication style is called "unicast".

Producer(Stream)----can be connected with ----->many subscribers : 
one to Many  This communication style is called "Multicast".

Based on Multicast communication style stream can be classified into two category.

1.Cold Observable(Cold Stream)
2.Hot Observable(Hot Stream)


1.Cold Observable

1.Observable that doesn’t emit items until a subscriber subscribes.

2.If we have more than one subscriber, then observable will emit sequence of items to all subscribers one by one. : cold

3.Each subscriber get fresh copy of the data from the begining.

4.Most of Observerables are Cold.

package com.mycom;

import io.reactivex.Observable;

import java.util.concurrent.TimeUnit;

public class ColdStream {
    public static void main(String[] args) throws InterruptedException {
        //
        Observable<Long> myObservable = Observable.interval(1, TimeUnit.SECONDS);

        myObservable.subscribe(item -> System.out.println("Observer 1: " + item));
        //after 3scs new subscriber joins
        Thread.sleep(3000);
        myObservable
                .doOnSubscribe((r) -> System.out.println("Observer 2 Joining"))
                .subscribe(item -> System.out.println("Observer 2: " + item));
        Thread.sleep(5000);

    }

}


Hot Observable:

1.Observables that don’t wait for any subscription. They start emitting items   when created.
2.They don’t emit the sequence of items again for a new subscriber.

3.When an item is emitted by hot observable, all the subscribers that are   subscribed will get the emitted item at once.



There are many ways to implement hot observables:

1.ConnectableObservable
2.Subjects


1.ConnectableObservable:
 Used to convert cold stream into hot stream

package com.mycom;

import io.reactivex.Observable;
import io.reactivex.observables.ConnectableObservable;

import java.util.concurrent.TimeUnit;

package com.mycom;

import io.reactivex.Observable;
import io.reactivex.disposables.Disposable;
import io.reactivex.observables.ConnectableObservable;

import java.util.concurrent.TimeUnit;

public class HotStream {
    public static void main(String[] args) throws InterruptedException {
        //cold observable
        Observable<Long> myObservable = Observable.interval(1, TimeUnit.SECONDS);
        //convert cold into hot
        ConnectableObservable<Long> connectableObservable = myObservable.publish();
        //try to connect all subscribers under one single unit.
        connectableObservable.connect();

      connectableObservable
                .doOnSubscribe((r) -> System.out.println("Observer 1 Joining"))
                .subscribe(item -> System.out.println("Observer 1: " + item));
        Thread.sleep(3000);
        Disposable subscriber2 =  connectableObservable
                .doOnSubscribe((r) -> System.out.println("Observer 2 Joining"))
                .doOnDispose(() -> System.out.println("Subscriber 2 left session"))
                .subscribe(item -> System.out.println("Observer 2: " + item));
        Thread.sleep(3500);
        subscriber2.dispose();
        connectableObservable
                .doOnSubscribe((r) -> System.out.println("Observer 3 Joining"))
                .subscribe(item -> System.out.println("Observer 3: " + item));
        Thread.sleep(8000);

    }
}
///////////////////////////////////////////////////////////////////////////////////////////
Reactive Stream-Back Pressure

Reactive Streams: - flow of data in motion
................
Reactive Streams is an initiative to provide a standard for asynchronous stream processing with non-blocking back pressure.

non blocking:
  Threading model


Back pressure:

 can implemented using Flowable
 can be implemented using operators


import io.reactivex.rxjava3.core.Observable;

import java.util.concurrent.TimeUnit;

public class BackPressureOperators {
    public static void sampleOpertor() {
        Observable<Integer> observable = Observable
                .range(1, 5000)
                .sample(1, TimeUnit.NANOSECONDS) //back pressure operator
                .map(i -> i); //down stream dont get values from 1 rather
        observable.subscribe(s -> {
            System.out.println("value after every 1 nano secs " + s);
        });
    }
    public static void buffer() {
        Observable.range(1, 2000)
                .buffer(5) //back pressure operator , buffering/storing values and send to down stream
                .map(i -> i) //down stream dont get values from 1 rather than get buffer of 5
                .subscribe((i) -> System.out.println("Item Got :" + i), System.out::println);
    }
    public static void lastN() {
        Observable.range(1, 100)
                .takeLast(50) //back pressure drop all items , expect last 50 values
                .map(i -> i) //down stream dont get values from 1 rather than get buffer of 5
                .subscribe((i) -> System.out.println("Item Got :" + i), System.out::println);
    }

    public static void main(String[] args) {
          // sampleOpertor();
        // buffer();
         lastN();
    }
}
  
package com.mycom;

import io.reactivex.Flowable;

public class BackPressureStream {
    public static void main(String[] args) {
        Flowable.just("Hello world").subscribe(System.out::println);
    }
}
//////////////////////////////////////////////////////////////////////////////////////////

Threading : non blocking:
..........................






























